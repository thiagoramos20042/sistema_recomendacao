import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import NearestNeighbors

# Carregando o dataset
df = pd.read_csv('Strength Training.csv')

# Convertendo as colunas para tipo num√©rico
df['ratings'] = pd.to_numeric(df['ratings'], errors='coerce')
df['no_of_ratings'] = pd.to_numeric(df['no_of_ratings'], errors='coerce')

# Preenchendo os valores ausentes com a m√©dia
df['ratings'].fillna(df['ratings'].mean(), inplace=True)
df['no_of_ratings'].fillna(df['no_of_ratings'].mean(), inplace=True)

# Selecionando os recursos para treinamento
features = ['ratings', 'no_of_ratings']

# Normalizando os recursos
scaler = MinMaxScaler()
data_normalized = scaler.fit_transform(df[features])
data_normalized_df = pd.DataFrame(data_normalized, columns=features)

# Treinando o modelo k-NN
knn_model = NearestNeighbors(metric='euclidean', algorithm='brute')
knn_model.fit(data_normalized_df)

# Fun√ß√£o para recomendar produtos com base em nomes de produtos
def recommend_products_with_images(product_names, n_recommendations=3):
    all_recommendations = []
    for product_name in product_names:
        product_index = df[df['name'] == product_name].index[0]
        distances, indices = knn_model.kneighbors(data_normalized_df.iloc[product_index, :].values.reshape(1, -1), n_neighbors=n_recommendations+1)
        recommended_products = [{"name": df.iloc[i]['name'], "image_url": df.iloc[i]['image']} for i in indices.flatten()][1:] # excluding the input product
        all_recommendations.extend(recommended_products)
    return all_recommendations

# Fun√ß√£o para a p√°gina de recomenda√ß√£o
def recommendation_page():
    st.title('Recomendador de Produtos')
    selected_products = st.multiselect('Selecione os produtos:', options=df['name'].tolist())
    if st.button('Obter Recomenda√ß√µes'):
        if selected_products:
            recommendations = recommend_products_with_images(selected_products)
            for rec in recommendations:
                st.write(f"Nome: {rec['name']}")
                st.image(rec['image_url'])
        else:
            st.warning('Por favor, selecione pelo menos um produto.')

# Fun√ß√£o para a p√°gina de explica√ß√£o
def explanation_page():
    st.title('Como Funciona o Sistema de Recomenda√ß√£o')
    st.write("""
    Este sistema de recomenda√ß√£o utiliza o algoritmo k-NN (k vizinhos mais pr√≥ximos) para fornecer recomenda√ß√µes personalizadas. Abaixo est√° a explica√ß√£o de como funciona todo o processo.
    """)

    st.header('Algoritmo k-NN (k Vizinhos Mais Pr√≥ximos)')
    st.write("""
    O algoritmo k-NN √© um m√©todo de aprendizado supervisionado utilizado para classifica√ß√£o e regress√£o. √â conhecido por sua simplicidade e efic√°cia, especialmente em tarefas de recomenda√ß√£o.
    """)

    st.subheader('Como Funciona?')
    st.write("""
    - Definir o Valor de k: Escolhe-se o n√∫mero de vizinhos a serem considerados (k).
    - Calcular Dist√¢ncias: As dist√¢ncias entre o ponto de consulta e todos os outros pontos no conjunto de dados s√£o calculadas usando a dist√¢ncia euclidiana.
    - Selecionar Vizinhos: Os k pontos mais pr√≥ximos (ou vizinhos) s√£o selecionados.
    - Tomar Decis√£o: A classe majorit√°ria ou a m√©dia dos valores dos k vizinhos √© usada.
    """)

    st.latex(r"\text{{Dist√¢ncia}} = \sqrt{{(x_2 - x_1)^2 + (y_2 - y_1)^2}}")

    st.subheader('Aplica√ß√£o no Sistema de Recomenda√ß√£o')
    st.write("""
    - Pr√©-processamento: Os recursos s√£o normalizados.
    - Treinamento do Modelo: Utilizamos o NearestNeighbors do Scikit-learn.
    - Recomenda√ß√£o: O modelo encontra os k vizinhos mais pr√≥ximos para cada produto selecionado.
    - Exibi√ß√£o: Os produtos recomendados s√£o exibidos na interface do usu√°rio.
    """)

    st.header('Aplica√ß√µes Pr√°ticas do Algoritmo k-NN')
    st.write("""
    - Recomenda√ß√£o de Produtos em Lojas Online: Recomenda produtos semelhantes aos clientes.
    - Diagn√≥stico M√©dico para Detec√ß√£o de Doen√ßas: Auxilia no diagn√≥stico preciso.
    - Reconhecimento Facial em Sistemas de Seguran√ßa: Refor√ßa a seguran√ßa.
    - Avalia√ß√£o de Cr√©dito em Bancos: Ajuda na tomada de decis√µes sobre concess√£o de cr√©dito.
    """)

    st.header('Conclus√£o')
    st.write("""
    O algoritmo k-NN √© uma ferramenta poderosa e vers√°til que pode ser facilmente aplicada para tarefas de recomenda√ß√£o. Sua simplicidade e a capacidade de trabalhar bem com diferentes tipos de dados o tornam uma escolha popular em muitas aplica√ß√µes de aprendizado de m√°quina, desde o com√©rcio e a sa√∫de at√© a seguran√ßa e a gest√£o de energia.
    """)
# Fun√ß√£o para a p√°gina "Problema de Neg√≥cio"
def business_problem_page():
    st.title("Problema de Neg√≥cio Hipot√©tico")
    
    st.subheader("Contexto")
    st.write("""
    A "FitnessGear Inc.", uma empresa l√≠der em equipamentos de treinamento de for√ßa, enfrentava um problema significativo com sua plataforma de com√©rcio eletr√¥nico. Embora a empresa oferecesse uma ampla variedade de produtos, desde pesos livres at√© m√°quinas sofisticadas, eles estavam enfrentando baixas taxas de convers√£o e uma m√©dia de venda por cliente abaixo das expectativas.

    A an√°lise dos padr√µes de navega√ß√£o revelou que os clientes frequentemente se sentiam sobrecarregados com a vasta sele√ß√£o de produtos e tinham dificuldade em encontrar itens que se adequassem √†s suas necessidades espec√≠ficas. Como resultado, muitos visitantes sa√≠am do site sem fazer uma compra, ou compravam apenas os itens mais populares, perdendo produtos complementares que poderiam ser de seu interesse.
    """)

    st.subheader("Solu√ß√£o Implementada")
    st.write("""
    A empresa decidiu implementar um sistema de recomenda√ß√£o personalizado utilizando o algoritmo k-NN (k vizinhos mais pr√≥ximos). Esta abordagem permitiu que a "FitnessGear Inc." analisasse as prefer√™ncias individuais dos clientes, tais como avalia√ß√µes e hist√≥rico de compras, e oferecesse recomenda√ß√µes de produtos personalizadas.

    O sistema recomendava produtos semelhantes, complementares e muitas vezes ignorados que estavam alinhados com as prefer√™ncias e necessidades individuais do cliente.
    """)

    st.subheader("Retorno Financeiro")
    st.write("""
    A implementa√ß√£o do sistema de recomenda√ß√£o teve um impacto profundo nos resultados financeiros da empresa:

    - **Aumento nas Vendas Cruzadas**: Ao sugerir produtos complementares, como acess√≥rios ou itens relacionados, o valor m√©dio do carrinho de compras aumentou em 25%.
    - **Melhoria na Taxa de Convers√£o**: A taxa de convers√£o do site aumentou em 18%, j√° que os clientes encontraram mais facilmente produtos que atendiam √†s suas necessidades.
    - **Crescimento na Reten√ß√£o de Clientes**: A experi√™ncia de compra personalizada melhorou a satisfa√ß√£o do cliente, resultando em um aumento de 10% na reten√ß√£o de clientes.
    - **Expans√£o do Cat√°logo Vendido**: Produtos anteriormente ignorados ou menos populares come√ßaram a ser vendidos, aumentando a diversidade de vendas e reduzindo o excesso de estoque em 15%.
    - **Aumento no Lucro Total**: Combinando todos esses fatores, a "FitnessGear Inc." experimentou um aumento de 30% no lucro l√≠quido no primeiro ano ap√≥s a implementa√ß√£o do sistema de recomenda√ß√£o.
    """)

def infos():
    st.title("Quem Sou Eu")
    
    st.subheader("Thiago Ramos de Oliveira")
    st.write("""
    üî¨ Meu objetivo √© fornecer solu√ß√µes eficientes e escal√°veis que impulsionem a tomada de decis√µes baseada em dados.

üíª Como programador em Python, aproveito seu poder e flexibilidade para desenvolver solu√ß√µes de ponta a ponta. Minha experi√™ncia inclui a cria√ß√£o de scripts e pipelines de extra√ß√£o, transforma√ß√£o e carga (ETL), bem como o desenvolvimento de APIs para facilitar o acesso aos dados.

üìä A an√°lise de dados √© minha paix√£o. Utilizando t√©cnicas estat√≠sticas avan√ßadas e ferramentas de visualiza√ß√£o, tenho a capacidade de identificar padr√µes, tend√™ncias e insights ocultos nos dados. Ao traduzir informa√ß√µes complexas em relat√≥rios e apresenta√ß√µes claras, ajudo as equipes a tomar decis√µes informadas e estrat√©gicas.

ü§ñ A cria√ß√£o de modelos de machine learning √© outra √°rea em que me destaco. Utilizando algoritmos de aprendizado supervisionado e n√£o supervisionado, desenvolvo modelos preditivos e de segmenta√ß√£o que melhoram a compreens√£o do neg√≥cio e impulsionam a efici√™ncia operacional.

üöÄ Sou apaixonado por aprender e estar atualizado com as mais recentes tend√™ncias e tecnologias relacionadas √† analise de dados, machine learning, intelig√™ncia artificial. Sempre estou em busca de novos desafios que me permitam aplicar minha expertise e colaborar com equipes multidisciplinares em projetos inovadores.


Perfil no Linkedin:
https://www.linkedin.com/in/thiago-ramos-oliveira/

Portf√≥lio no github:
https://github.com/thiagoramos20042?tab=repositories
    """)


# P√°ginas
st.sidebar.title('Menu')
page = st.sidebar.selectbox('Escolha uma p√°gina:', ['Problema de Neg√≥cio', 'Como Funciona', 'Recomenda√ß√£o de Produtos', 'Quem Sou Eu'])
if page == 'Recomenda√ß√£o de Produtos':
    recommendation_page()
elif page == 'Como Funciona':
    explanation_page()
elif page == 'Problema de Neg√≥cio':
    business_problem_page()
elif page == 'Quem Sou Eu':
    infos()